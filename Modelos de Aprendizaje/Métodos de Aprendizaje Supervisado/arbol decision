# Cargar las librerías necesarias
library(rattle)       # Para crear el árbol de decisión
library(caret) # Para particionar los datos y métricas de rendimiento
library(rpart)  # Para crear el árbol de decisión

# Cargar el conjunto de datos iris
dara <- read.csv("data")
str(data) #Visualizamos los datos

# Revisamos y eliminamos datos faltantes
sum(is.na(data))

# Dividir el conjunto de datos en entrenamiento (70%) y prueba (30%)
set.seed(123)  # Fijar la semilla para reproducibilidad
train_index <- createDataPartition(data$Species, p = 0.7, list = FALSE)

train_data <- data[train_index, ]
test_data <- data[-train_index, ]

# Crear el modelo de árbol de decisión
decision_tree_model <- train(Species ~.,
                  data = trainData,
                  method = "rpart",
                  trControl = trainControl(method = "cv", number = 10), #Definimos el esquema de validación
                  preProcess = c("center", "scale"), #Estandarización de variables
                  tuneLength = 15) #Controlamos la cantidad de combinaciones

#Visualizar Decision tree
decision_tree_model
plot(decision_tree_model)
fancyRpartPlot(decision_tree_model$finalModel, type=4)

#Predicción datos
dt_predictions <- predict(decision_tree_model, testData)
print(dt_predictions)

#Matriz de Confusión
Confusion_dt <- confusionMatrix(dt_predictions, testData$Species)
print(Confusion_dt)

#Probabilidad
probabilities_dt <- predict(decision_tree_model, newdata = testData, type = "prob")#Con esto evaluamos que tan preciso es que cada observación sea de la clase mencionada.
print(probabilities_dt)


